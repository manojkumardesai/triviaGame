{"version":3,"sources":["services/QUIZ_API.ts","components/trivia/TriviaCard.styles.ts","components/trivia/TriviaCard.tsx","images/gameBG.jpg","styles/App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","QuizType","fetchTriviaQuestions","amount","difficulty","type","a","api","fetch","json","dataFromApi","results","map","question","answers","incorrect_answers","correct_answer","sort","reverse","Wrapper","styled","div","ButtonWrapper","correct","userClicked","TriviaCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","gameBG","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","MULTIPLE_CHOICE","newQuestions","length","undefined","event","currentTarget","prev","answersObject","TOTAL_QUESTIONS","nextQuestionNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3661d673.chunk.js","sourcesContent":["// Types\nimport { Question } from './TriviaTypes';\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\" \n}\n\nexport enum QuizType {\n    MULTIPLE_CHOICE = \"multiple\",\n    TRUE_FALSE = \"boolean\"\n}\n\nexport const fetchTriviaQuestions = async (amount: number, difficulty: Difficulty, type: QuizType) => {\n    const api = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${type}`;\n    const dataFromApi = await (await fetch(api)).json();\n    return dataFromApi.results.map((question: Question) => (\n        {\n            ...question,\n            answers: [\n                ...question.incorrect_answers,\n                question.correct_answer\n            ].sort().reverse()\n        }\n    ))\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;","import React from 'react';\nimport { AnswerObject } from '../../services/TriviaTypes';\n\n// styles \nimport { Wrapper, ButtonWrapper } from './TriviaCard.styles';\n\ntype CardProps = {\n    question: string;\n    answers: string[];\n    callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst TriviaCard : React.FC<CardProps> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNumber,\n    totalQuestions\n}) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNumber} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML = {{ __html: question}} />\n        <div>\n            {answers.map((answer) => (\n                <ButtonWrapper \n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}>\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default TriviaCard;\n","export default __webpack_public_path__ + \"static/media/gameBG.f38fabf8.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport gameBG from '../images/gameBG.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${gameBG});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n`;","import React, { useState } from 'react';\n\n// API\nimport { fetchTriviaQuestions, Difficulty, QuizType } from './services/QUIZ_API';\n\n// Types\nimport { QuestionExtended, AnswerObject } from './services/TriviaTypes';\n\n// Components\nimport TriviaCard from './components/trivia/TriviaCard';\n\n// Styles\nimport { GlobalStyle, Wrapper } from './styles/App.styles';\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionExtended[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchTriviaQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n      QuizType.MULTIPLE_CHOICE\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user's answer\n      const answer = event.currentTarget.value;\n      // correct answer\n      const correct = questions[number].correct_answer === answer;\n      // increment score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // save user responses\n      const answersObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answersObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Load next question until end of question list is reached\n    const nextQuestionNumber = number + 1;\n\n    if (nextQuestionNumber === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestionNumber);\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>Trivia Game</h1>\n      {\n        gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start Game\n        </button>\n        ) : null\n      }\n      { !gameOver ? <p className=\"score\">Score: {score} </p> : null }\n      { loading && <p>Loading Questions...</p> }\n      { !loading && !gameOver && (\n        <TriviaCard \n          questionNumber = {number + 1}\n          totalQuestions = {TOTAL_QUESTIONS}\n          question = {questions[number].question}\n          answers = {questions[number].answers}\n          userAnswer = {userAnswers ? userAnswers[number]: undefined}\n          callback = {checkAnswer}\n        /> \n        )}\n      { !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n        ) : null \n      }\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}